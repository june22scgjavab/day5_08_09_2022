   My File name is Hello.java and we have two classes Hello and Hi. So
  what will be the output.
  
  public class Hello{

   void message(){
    System.out.println("Hello");
   }

  }

 public class Hi {
   public static void main(String[] args){
    Hello hello=new Hello();
    hello.message();
   }
 } 

Compilation error , as we cannot have two public classes in the same file.
-----------------------------------------------------------------------------------------------
Hello.java

  public class Hello{

   void message(){
    System.out.println("Hello");
   }

  }

 class Hi {
   public static void main(String[] args){
    Hello hello=new Hello();
    hello.message();
   }
 } 

------------------------------------------------------------------------------------------------

public class Data{
   private int i;

   public static void main(String args[]){
     
        System.out.println(i);

   }
}
[ The variable i is not static and main is static so we cannot access non-static member from 
static method or block]
-----------------------------------------------------------------------------------------------------
[ The way out to access the non static member i is to create an object of Data class and access i.

public class Data{
   private int i;

   public static void main(String args[]){
        Data data=new Data();
        System.out.println(data.i);

   }
}
The above code wil display 0.
--------------------------------------------------------------------------------------------
public class Data{
   private int i;  // instance variable i

   public static void main(String args[]){
        int k;   // local variable k and local variable should be initialised before access
        Data data=new Data();
        System.out.println(data.i);
        System.out.println(k);
    }
}
[ The above code is having error. k needs to be initialised. i is an instance variable and k is 
a local variable. Instance variables are initialised with default constructors. That is the reason
we dont require initialising the instance variables explicitly but if the variables are local like k,
in that case we need to initialise the variable before the access. ]
--------------------------------------------------------------------------------------------------

  package mypack1;

  public class Data{
    int i;
    String name;

  }

  package mypack2;
  import mypack1.Data;
  public classs DataMain{
    public static void main(String args[]){
        Data data=new Data():
        System.out.println(data.i);
        System.out.println(data.name);
     }
   }
[ Compilation error as Data is in different package and i and name are default members . Default members are not accessible outside the package. ]
---------------------------------------------------------------------------------------------------
  
package mypack1;
 public class Data{
    private int i;
    private String name;

  }

  package mypack2;
  import mypack1.Data;
  public classs DataMain{
    public static void main(String args[]){
        Data data=new Data():
        System.out.println(data.i);
        System.out.println(data.name);
     }
   }
   }
[ Compilation error as Data is in different package and i and name are private members . Private members are not accessible outside the package. ]
------------------------------------------------------------------------------------------------------package mypack1;
 public class Data{
    public int i;
    public String name;

  }

  package mypack2;
  import mypack1.Data;
  public classs DataMain{
    public static void main(String args[]){
        Data data=new Data():
        System.out.println(data.i);
        System.out.println(data.name);
     }
   }
   }

The output is 0 and null
-----------------------------------------------------------------------------------------------

package mypack1;
 public class Data{
    private int i;
    private String name;

    public void display(){
    System.out.println(i);
    System.out.println(name);
    }

  }

  package mypack2;
  import mypack1.Data;
  public classs DataMain{
    public static void main(String args[]){
        Data data=new Data():
        data.display();    // 0 and null
     }
   }
   }
So private members cannot be accessed by other class but we can make a public method through which 
we can display/access the private members]
---------------------------------------------------------------------------------------------------
  public class Data{
   public void display(){
    private int i=10;
    System.out.println(i);
   }

   public static void main(String args[]){
     Data data=new Data();
     data.display();
   }
 }
 [ The local variables cannot have access modifiers. We cannot write i with access modifier]  
------------------------------------------------------------------------------------------------------
  
  int numbers[]=new int[5];
   OR
  int numbers[];   // We are declaring an array of type int.
  numbers=new int[5]; // 5 is the length/size of the array.
  OR
  int[] numbers=new int[5]; 
-------------------------------------------------------------------------------------------
 
for each is used arrays or with collections.

   int numbers[]=new int[3];
  for(int num : numbers){
    System.out.println(num);
   }
--------------------------------------------------------------
 int numbers[][]=new int[3][4];
 for(int nums[] : numbers) {
   for(int n : nums){
    System.out.print(n);
   }
 }
-------------------------------------------
javac Greetings.java
java Greetings Diptish Avinash Suresh
-------------------------------------------------------------------------------------------------------
We need to design a class called Student with student's roll,name , marks in 3 subjects and grade.
Grade will be decided based on the average score. If the average score is more than 80 , then the grade will be A . If the grade is between 70 and 80 the grade will be B otherwise. 
One more class is required to have main method. Let the class name be StudentMain.
----------------------------------------------------------------------------------------------
String is a predefined class in Java API ( Application Programming Interface). 

So what is API? 
It is a library of java classes and iterfaces.


int num=10;
// 10 int literal/constant

char ch='A';
// A is a char literal/constant

String str="welcome";
// welcome is s String literal/constant

String is an immutable object. Which means once crated, we cannot make a change in the existing object.
With every change it creates a new object.

String s1="hello";
Sting s2="world";
String s3=s1.concat(s2); 

IT CREATES A NEW STRING helloworld. 
--------------------------------------------------------------------------------------------

== =====> comparing whether two reference variables are pointing to the same object or not

equals====> checks whether the content of two objects are same or not.


String str1="hello";
String str2="hello";

In this case both str1 and str2 are pointing to the same String literal hello

str1==str2    ===> true
str1.equals(str2) ====> true
------------------------------------------------------------------------------------------------



String str1=new String("hello");     str1===> 34567
String str2=new String("hello");     str2===> 56789
str1==str2======> false
str1.equals(str2) =====> true   
------------------------------------------------------------------------------------------------------String str1="hello";
String str2="Hello";
str1==str2; false
str1.equals(str2); false

str1.equalsIgnoreCase(str2); // true
 -------------------------------------------------------------------------------------------------   


